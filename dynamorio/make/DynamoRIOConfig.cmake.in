# **********************************************************
# Copyright (c) 2010-2012 Google, Inc.    All rights reserved.
# Copyright (c) 2009-2010 VMware, Inc.    All rights reserved.
# **********************************************************

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# * Neither the name of VMware, Inc. nor the names of its contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.

###########################################################################
#
# How to use:
#
# Step 1 of 2: load this file in your client's CMakeLists.txt file:
#
#   find_package(DynamoRIO)
#
# You can optionally specify the version number you need:
#
#   find_package(DynamoRIO 1.4)
#
# If DynamoRIO is not installed in standard system directories, set
# the DynamoRIO_DIR variable to tell find_package() where to find
# DynamoRIO's cmake/ directory:
#
#   cmake -DDynamoRIO_DIR=/path/to/dynamorio/cmake <path/to/myclient/sources>
#
# Step 2 of 2: after you've defined your target, configure it using the
# configure_DynamoRIO_client() function defined in this file.
# For example:
#
#  add_library(myclient SHARED myclient.c)
#  configure_DynamoRIO_client(myclient)
#
###########
#
# Standalone usage:
#
# If instead of a client you are using DynamoRIO as a standalone library,
# use the configure_DynamoRIO_standalone() function:
#
#  add_executable(myapp myapp.c)
#  configure_DynamoRIO_standalone(myapp)
#
# If using the drconfig (dr_config.h) and/or drinject (dr_inject.h) API's,
# you also need to explicitly link with those libraries:
#
#  target_link_libraries(myapp drinjectlib drconfiglib)
#
###########
#
# Decoder usage:
#
# If instead of a client you are using DynamoRIO's static decoder library,
# use the configure_DynamoRIO_decoder() function:
#
#  add_executable(myapp myapp.c)
#  configure_DynamoRIO_decoder(myapp)
#
###########
#
# Global changes:
#
# Due to CMake limitations, this file must set some global values:
# - include directories
# - compiler flags
#
# In order to set the compiler flags, the base flags are emptied out:
# - CMAKE_C_FLAGS
# - CMAKE_CXX_FLAGS
# - CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}
# - CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}
# - CMAKE_C_FLAGS_${CMAKE_CONFIGURATION_TYPES} (for each, uppercase)
# - CMAKE_CXX_FLAGS_${CMAKE_CONFIGURATION_TYPES} (for each, uppercase)
#
# None of the global changes occur on the find_package(); they are only
# implemented on the first configure_DynamoRIO_*() call.  Optionally,
# they can be triggered earlier by calling configure_DynamoRIO_global().
# The original cflag values are saved in variables with the prefix ORIG_
# followed by the variable name (e.g., ORIG_CMAKE_C_FLAGS).
#
# The compiler flags are not changed when using
# configure_DynamoRIO_decoder().
#
# Various properties of the targets passed to configure_DynamoRIO_*()
# are set, so any prior values will be lost, and if later values are
# added after the configure call they should be appended.
#
# The preprocessor definitions that are added to the compiler flags
# can be retrieved via the function get_DynamoRIO_defines().
#
###########
#
# Optional parameters:
#
# By default, the RPATH is not set for clients, but is set for standalone usage.
# If this variable is set it overrides the default behavior:
#
#  set(DynamoRIO_RPATH ON)
#
# If you are not exporting all global symbols in your Linux client,
# this file tries to automatically determine that and explicitly mark
# required client exports as visible.  The auto-detection can be
# overridden by setting this variable before calling the
# configure_DynamoRIO_client():
#
#  set(DynamoRIO_VISATT ON)
#
# To request the old REG_ enum symbols (which were changed to DR_REG_ to
# avoid conflicts with system headers) set this variable:
#
#  set(DynamoRIO_REG_COMPATIBILITY ON)
#
# To request a preferred base even when not targeting 64-bit:
# (the actual base will use PREFERRED_BASE if set)
#
#  set(DynamoRIO_SET_PREFERRED_BASE ON)
#
# On Windows, by default, standalone clients and C++ clients link with
# the C library, but C clients do not.  To link with the C library for
# a C client (which is required if using a static library build of
# the drsyms Extension), set this variable:
#
#  set(DynamoRIO_USE_LIBC ON)
#
# To request fast IR access (at the cost of binary compatibility):
#
#  set(DynamoRIO_FAST_IR ON)
#
###########################################################################

if (UNIX)
  if (NOT CMAKE_COMPILER_IS_GNUCC)
    # Our linker script is GNU-specific
    message(FATAL_ERROR "DynamoRIO's CMake configuration only supports the GNU linker on Linux")
  endif (NOT CMAKE_COMPILER_IS_GNUCC)
else (UNIX)
  if (NOT ${COMPILER_BASE_NAME} STREQUAL "cl")
    # Our link flags are Microsoft-specific
    message(FATAL_ERROR "DynamoRIO's CMake configuration only supports the Microsoft compiler on Windows")
  endif (NOT ${COMPILER_BASE_NAME} STREQUAL "cl")
endif (UNIX)
    
get_filename_component(cwd "${CMAKE_CURRENT_LIST_FILE}" PATH)

# Export variables in case client needs custom configuration that
# our exported functions do not provide.
# Additionally, only set if not already defined, to allow
# for further customization.
if (NOT DEFINED DynamoRIO_INCLUDE_DIRS)
  set(DynamoRIO_INCLUDE_DIRS "${cwd}/../include")
endif (NOT DEFINED DynamoRIO_INCLUDE_DIRS)

string(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UPPER)

###########################################################################
#
# Define functions the client can use to set up build parameters:


# helper function
function (get_lang target lang_var)
  # Note that HAS_CXX and LINKER_LANGUAGE are only defined it
  # explicitly set: can't be used to distinguish CXX vs C.
  get_target_property(sources ${target} SOURCES)
  foreach (src ${sources})
    # LANGUAGE, however, is set for us
    get_source_file_property(src_lang ${src} LANGUAGE)
    if (NOT DEFINED tgt_lang)
      set(tgt_lang ${src_lang})
    elseif (${src_lang} MATCHES CXX)
      # If any source file is cxx, mark as cxx
      set(tgt_lang ${src_lang})
    endif (NOT DEFINED tgt_lang)
  endforeach (src)

  set(${lang_var} ${tgt_lang} PARENT_SCOPE)
endfunction (get_lang)


# helper function
function (get_size is_cxx x64_var)
  if (is_cxx)
    set(sizeof_void ${CMAKE_CXX_SIZEOF_DATA_PTR})
  else (is_cxx)
    set(sizeof_void ${CMAKE_C_SIZEOF_DATA_PTR})
  endif (is_cxx)

  if ("${sizeof_void}" STREQUAL "")
    message(FATAL_ERROR "unable to determine bitwidth: did earlier ABI tests fail?  check CMakeFiles/CMakeError.log")
  endif ("${sizeof_void}" STREQUAL "")

  if (${sizeof_void} EQUAL 8)
    set(${x64_var} ON PARENT_SCOPE)
  else (${sizeof_void} EQUAL 8)
    set(${x64_var} OFF PARENT_SCOPE)
  endif (${sizeof_void} EQUAL 8)
endfunction (get_size)


function (set_compile_flags target tgt_cflags)
  # i#850: we do not want the C flags being used for asm objects so we only set
  # on C/C++ files and not on the target.
  # We do want the defines and include dirs to be global (or at least on the
  # asm targets if using cpp2asm...)
  # First, convert "/D FOO" to "/DFOO" for easier list conversion
  string(REGEX REPLACE " /D " " /D" tgt_cflags_list "${tgt_cflags}")
  # Now convert to list
  string(REGEX REPLACE " " ";" tgt_cflags_list "${tgt_cflags_list}")
  foreach(flag ${tgt_cflags_list})
    if (flag MATCHES "^[-/]D" OR flag MATCHES "^[-/]I")
      set(tgt_definc "${tgt_definc} ${flag}")
    else ()
      set(tgt_flags "${tgt_flags} ${flag}")
    endif ()
  endforeach (flag)
  get_target_property(srcs ${target} SOURCES)
  foreach (src ${srcs})
    get_source_file_property(lang ${src} LANGUAGE)
    if ("${lang}" STREQUAL "C" OR "${lang}" STREQUAL "CXX" AND
        # do not add COMPILE_FLAGS to an .obj file else VS2008 will try to
        # compile the file!
        NOT src MATCHES "\\.obj$")
      # XXX: if we require cmake 2.8.6 we can simply use APPEND_STRING
      get_source_file_property(cur_flags ${src} COMPILE_FLAGS)
      if (NOT cur_flags)
        set(cur_flags "")
      endif (NOT cur_flags)
      set_source_files_properties(${src} PROPERTIES
        COMPILE_FLAGS "${cur_flags} ${tgt_flags}")
    endif ()
  endforeach (src)

  set_target_properties(${target} PROPERTIES COMPILE_FLAGS "${tgt_definc}")
endfunction(set_compile_flags)


# Unfortunately, CMake doesn't support removing flags on a per-target basis,
# or per-target include dirs or link dirs, so we have to make global changes.
# We don't want find_package() to incur those changes: only if a target
# is actually configured.
function (configure_DynamoRIO_global is_cxx change_flags)
  # Should only be done once, but not done at all if no target configured
  if (NOT DynamoRIO_configured_globally)
    # Parent must execute this as well b/c there's no GLOBAL_SCOPE
    set(DynamoRIO_configured_globally ON PARENT_SCOPE)
    # If called from another function, indicate whether to propagate
    # with a variable that does not make it up to global scope
    if (nested_scope)
      set(just_configured ON PARENT_SCOPE)
    endif (nested_scope)

    include_directories(${DynamoRIO_INCLUDE_DIRS})

    # We can't have configure_common() pass in is_x64, since we want to
    # support a user calling us prior to setting up any targets
    get_size(${is_cxx} is_x64)

    if (is_x64)
      set(bits 64)
    else (is_x64)
      set(bits 32)
    endif (is_x64)

    if (DEBUG OR "${CMAKE_BUILD_TYPE}" MATCHES "Debug")
      set(type debug)
    else ()
      set(type release)
    endif ()

    if (NOT DynamoRIO_INTERNAL)
      # if we were built w/ static drsyms, clients need dependent static libs too
      if (UNIX AND EXISTS "${cwd}/../ext/lib${bits}/${type}/libdwarf.a")
        add_library(elf STATIC IMPORTED)
        set_property(TARGET elf PROPERTY
          IMPORTED_LOCATION "${cwd}/../ext/lib${bits}/${type}/libelf.a")
        add_library(dwarf STATIC IMPORTED)
        set_property(TARGET dwarf PROPERTY
          IMPORTED_LOCATION "${cwd}/../ext/lib${bits}/${type}/libdwarf.a")
        add_library(elftc STATIC IMPORTED)
        set_property(TARGET elftc PROPERTY
          IMPORTED_LOCATION "${cwd}/../ext/lib${bits}/${type}/libelftc.a")
      endif ()
      if (WIN32 AND EXISTS "${cwd}/../ext/lib${bits}/${type}/dwarf.lib")
        add_library(dwarf STATIC IMPORTED)
        set_property(TARGET dwarf PROPERTY
          IMPORTED_LOCATION "${cwd}/../ext/lib${bits}/${type}/dwarf.lib")
        add_library(elftc STATIC IMPORTED)
        set_property(TARGET elftc PROPERTY
          IMPORTED_LOCATION "${cwd}/../ext/lib${bits}/${type}/elftc.lib")
      endif ()

      # Define imported target for DynamoRIO library, to allow dependencies on
      # the library and trigger client rebuild on DynamoRIO upgrade:
      # We always link to release build.  At runtime debug build can be
      # swapped in instead.
      # We assume is_x64 can have only one value per configuration.
      include(${cwd}/DynamoRIOTarget${bits}.cmake)
    endif (NOT DynamoRIO_INTERNAL)

    if (change_flags)
      # Remove global C flags that are unsafe for a client library.
      # Since CMake does not support removing flags on a per-target basis,
      # we clear the base flags so we can add what we want to each target.
      foreach (config "" ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})
        if ("${config}" STREQUAL "")
          set(config_upper "")
        else ("${config}" STREQUAL "")
          string(TOUPPER "_${config}" config_upper)
        endif ("${config}" STREQUAL "")
        foreach (var CMAKE_C_FLAGS${config_upper};CMAKE_CXX_FLAGS${config_upper})
          set(ORIG_${var} "${${var}}" PARENT_SCOPE)
          set(local_${var} "${${var}}")
          if (WIN32)
            # We could limit this global var changing to Windows,
            # but it simplifies cross-platform uses to be symmetric
            if (local_${var} MATCHES "/M[TD]")
              string(REGEX REPLACE "/M[TD]" "/MT" local_${var} "${local_${var}}")
            else ()
              set(local_${var} "${local_${var}} /MT")
            endif ()
            string(REGEX REPLACE "/RTC." "" local_${var} "${local_${var}}")
          endif (WIN32)
          set(CLIENT_${var} "${local_${var}}" PARENT_SCOPE)
          # If we set to "", the default values come back
          set(${var} " " PARENT_SCOPE)
        endforeach (var)
      endforeach (config)
    endif (change_flags)

  endif (NOT DynamoRIO_configured_globally)
endfunction (configure_DynamoRIO_global)

function (DynamoRIO_extra_cflags flags_out extra_cflags tgt_cxx)
  get_size(${tgt_cxx} tgt_x64)
  if (tgt_x64)
    set(extra_cflags "${extra_cflags} -DX86_64")
  else (tgt_x64)
    set(extra_cflags "${extra_cflags} -DX86_32")
  endif (tgt_x64)

  if (UNIX)
    set(extra_cflags "${extra_cflags} -DLINUX")
  else (UNIX)
    set(extra_cflags "${extra_cflags} -DWINDOWS")
  endif (UNIX)

  if (DynamoRIO_REG_COMPATIBILITY)
    set(extra_cflags "${extra_cflags} -DDR_REG_ENUM_COMPATIBILITY")
  endif (DynamoRIO_REG_COMPATIBILITY)

  if (DynamoRIO_FAST_IR)
    set(extra_cflags "${extra_cflags} -DDR_FAST_IR")
  endif (DynamoRIO_FAST_IR)

  set(${flags_out} "${extra_cflags}" PARENT_SCOPE)
endfunction (DynamoRIO_extra_cflags)

function (configure_DynamoRIO_common target is_client x64_var defs_var link_var)
  get_lang(${target} tgt_lang)
  if (${tgt_lang} MATCHES CXX)
    set(tgt_cxx ON)
  else (${tgt_lang} MATCHES CXX)
    set(tgt_cxx OFF)
  endif (${tgt_lang} MATCHES CXX)

  set(nested_scope ON) # for propagation
  configure_DynamoRIO_global(${tgt_cxx} ON)
  if (just_configured)
    # get around lack of GLOBAL_SCOPE
    set(just_configured ON PARENT_SCOPE)
    foreach (config "" ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})
      if ("${config}" STREQUAL "")
        set(config_upper "")
      else ("${config}" STREQUAL "")
        string(TOUPPER "_${config}" config_upper)
      endif ("${config}" STREQUAL "")
      foreach (var CMAKE_C_FLAGS${config_upper};CMAKE_CXX_FLAGS${config_upper})
        set(ORIG_${var} "${ORIG_${var}}" PARENT_SCOPE)
        set(CLIENT_${var} "${CLIENT_${var}}" PARENT_SCOPE)
        set(${var} "${${var}}" PARENT_SCOPE)
      endforeach (var)
    endforeach (config)
    set(DynamoRIO_configured_globally ${DynamoRIO_configured_globally} PARENT_SCOPE)
  endif (just_configured)

  # we ignore per-config flags here
  if (is_client)
    if (tgt_cxx)
      set(tgt_cflags
        "${CLIENT_CMAKE_CXX_FLAGS} ${CLIENT_CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}")
    else (tgt_cxx)
      set(tgt_cflags
        "${CLIENT_CMAKE_C_FLAGS} ${CLIENT_CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}")
    endif (tgt_cxx)
  else (is_client)
    if (tgt_cxx)
      set(tgt_cflags
        "${ORIG_CMAKE_CXX_FLAGS} ${ORIG_CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}")
    else (tgt_cxx)
      set(tgt_cflags
        "${ORIG_CMAKE_C_FLAGS} ${ORIG_CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}")
    endif (tgt_cxx)
    if (WIN32)
      # For standalone we want the original flags, but we need to
      # explicitly link in static libc prior to dynamorio.lib to avoid
      # conflicts w/ ntdll forwards, so we don't support dynamic libc
      # (xref i#686) (or /MT since it puts libc last but we manipulate
      # that later).
      if (tgt_cflags MATCHES "/MD")
        string(REGEX REPLACE "/MD" "/MT" tgt_cflags "${tgt_cflags}")
      else ()
        set(tgt_cflags "${tgt_cflags} /MT")
      endif ()
    endif (WIN32)
  endif (is_client)

  get_size(${tgt_cxx} tgt_x64)
  DynamoRIO_extra_cflags(tgt_cflags "${tgt_cflags}" ${tgt_cxx})

  if (UNIX)
    if (is_client)

      if (NOT DEFINED DynamoRIO_VISATT)
        # Try to automatically determine visibility
        if ("${tgt_cflags}" MATCHES "-fvisibility=hidden|-fvisibility=internal")
          set(DynamoRIO_VISATT ON)
        endif()
      endif (NOT DEFINED DynamoRIO_VISATT)
      if (DynamoRIO_VISATT)
        set(tgt_cflags "${tgt_cflags} -DUSE_VISIBILITY_ATTRIBUTES")
      endif (DynamoRIO_VISATT)
      if (tgt_cxx)
        set(tgt_link_flags "${tgt_link_flags}")
      endif (tgt_cxx)

      # avoid SElinux text relocation security violations by explicitly requesting PIC
      # i#157, when enable private loader, symbols from default libraries and startfiles
      # are required, so -nostartfiles and -nodefaultlibs should be removed
      set(tgt_link_flags 
        "${tgt_link_flags} -fPIC -shared -lgcc")

      # i#163: avoid stack-check feature that relies on separate library
      execute_process(COMMAND
        ${CMAKE_C_COMPILER} -v --help
        RESULT_VARIABLE gcc_result
        ERROR_QUIET
        OUTPUT_VARIABLE gcc_out)
      if (gcc_result)
        message(FATAL_ERROR "*** ${CMAKE_C_COMPILER} failed to run ***\n")
      endif (gcc_result)
      string(REGEX MATCH "fstack-protector" flag_present "${gcc_out}")
      if (flag_present)
        set(tgt_cflags "${tgt_cflags} -fno-stack-protector")
      endif (flag_present)

    endif (is_client)
    # gcc is invoked for the link step so we have to repeat cflags as well
    set(tgt_link_flags "${tgt_cflags} ${tgt_link_flags}")
  else (UNIX)
    if (tgt_cxx)
      set(tgt_cflags "${tgt_cflags} /EHsc")
    endif (tgt_cxx)
    if (is_client)
      # Avoid bringing in libc and/or kernel32 for stack checks
      set(tgt_cflags "${tgt_cflags} /GS-")
      # FIXME: why isn't /debug showing up: is it
    endif (is_client)
    if (DynamoRIO_USE_LIBC OR tgt_cxx OR NOT is_client)
      # Take advantage of the Windows private loader: no longer need
      # /nodefaultlib or /noentry.
      #
      # However, for i#233, we require static libc for VS2005 and VS2008
      # to avoid SxS.  For simplicity we just require them regardless.
      #
      # Plus, we can't use just /MT for clients or standalone (i#686) b/c it
      # puts libcmt at the end and we hit dup def problems.  We need
      # libcmt to come in before dynamorio to avoid conflicts w/
      # forwarded routines.
      #
      # Note that any client linking with ntdll will have to add it
      # AFTER these are added if any forwarded routines are used.
      #
      # Note that when using a static drsyms library, /noentry
      # results in weird "missing _main" even when linking "/dll"
      # so we no longer use it
      if (tgt_cxx)
        set(tgt_link_flags "${tgt_link_flags} /nodefaultlib:libcmt")
      else (tgt_cxx)
        set(tgt_link_flags "${tgt_link_flags} /nodefaultlib")
      endif (tgt_cxx)
      if (DEBUG OR "${CMAKE_BUILD_TYPE}" MATCHES "Debug")
        set(static_libc libcmtd)
        if (tgt_cxx)
          set(static_libc libcpmtd ${static_libc})
        endif ()
        # libcmt has symbols libcmtd does not so we need all files compiled w/ _DEBUG
        set(tgt_cflags "${tgt_cflags} -D_DEBUG")
      else ()
        set(static_libc libcmt)
        if (tgt_cxx)
          set(static_libc libcpmt ${static_libc})
        endif ()
      endif ()
      target_link_libraries(${target} ${static_libc})
    else ()
      set(tgt_link_flags "${tgt_link_flags} /nodefaultlib /noentry")
    endif ()
  endif (UNIX)

  # DynamoRIOTarget.cmake added the "dynamorio" imported target
  target_link_libraries(${target} dynamorio)

  if (DEFINED DynamoRIO_RPATH)
    set(use_rpath ${DynamoRIO_RPATH})
  else (DEFINED DynamoRIO_RPATH)
    if (is_client)
      # We don't want an rpath as it makes it hard to switch
      # between debug and release libraries at runtime
      set(use_rpath OFF)
    else (is_client)
      # Standalone app is run without drdeploy script to set
      # LD_LIBRARY_PATH, so default to rpath.  Even though it
      # makes it more painful to switch to the debug library,
      # that's rarely needed for standalone.
      set(use_rpath ON)
    endif (is_client)
  endif (DEFINED DynamoRIO_RPATH)
  if (use_rpath)
    get_target_property(libdir dynamorio LOCATION)
    set_target_properties(${target} PROPERTIES
      INSTALL_RPATH ${libdir})
  else (use_rpath)
    set_target_properties(${target} PROPERTIES
      SKIP_BUILD_RPATH ON)
  endif (use_rpath)

  # Pass data to caller
  set(${x64_var} ${tgt_x64} PARENT_SCOPE)
  set(${defs_var} "${tgt_cflags}" PARENT_SCOPE)
  set(${link_var} "${tgt_link_flags}" PARENT_SCOPE)

endfunction (configure_DynamoRIO_common)


function (configure_DynamoRIO_client target)
  configure_DynamoRIO_common(${target} ON tgt_x64 tgt_cflags tgt_link_flags)
  if (just_configured)
    # get around lack of GLOBAL_SCOPE
    # do NOT set just_configured in global scope
    foreach (config "" ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})
      if ("${config}" STREQUAL "")
        set(config_upper "")
      else ("${config}" STREQUAL "")
        string(TOUPPER "_${config}" config_upper)
      endif ("${config}" STREQUAL "")
      foreach (var CMAKE_C_FLAGS${config_upper};CMAKE_CXX_FLAGS${config_upper})
        set(ORIG_${var} "${ORIG_${var}}" PARENT_SCOPE)
        set(CLIENT_${var} "${CLIENT_${var}}" PARENT_SCOPE)
        set(${var} "${${var}}" PARENT_SCOPE)
      endforeach (var)
    endforeach (config)
    set(DynamoRIO_configured_globally ${DynamoRIO_configured_globally} PARENT_SCOPE)
  endif (just_configured)

  if (tgt_x64 OR DynamoRIO_SET_PREFERRED_BASE)
    # While we now have private loaders that mean we don't need a preferred
    # base in the lower 2GB, on Windows it's more efficient to avoid
    # relocation by doing so.
    # Naturally for multiple clients different addresses should be used.
    # We suggest using the range 0x72000000-0x75000000.
    if (NOT DEFINED PREFERRED_BASE)
      set(PREFERRED_BASE 0x72000000)
    endif ()
    if (UNIX)
      # We use a linker script to set the preferred base
      set(LD_SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/ldscript)
      # We do NOT add ${LD_SCRIPT} as an ADDITIONAL_MAKE_CLEAN_FILES since it's
      # configure-time built not make-time built
      set(LD_FLAGS "-melf_x86_64")

      # In order to just tweak the default linker script we start with exactly that.
      execute_process(COMMAND
        ${CMAKE_LINKER} "${LD_FLAGS}" --verbose
        RESULT_VARIABLE ld_result
        ERROR_VARIABLE ld_error
        OUTPUT_VARIABLE string)
      if (ld_result OR ld_error)
        message(FATAL_ERROR "*** ${CMAKE_LINKER} failed: ***\n${ld_error}")
      endif (ld_result OR ld_error)

      # Strip out just the SECTIONS{} portion
      string(REGEX REPLACE ".*(SECTIONS.*\n\\}).*" "\\1" string "${string}")
      # Find and replace the default base
      string(REGEX MATCH "= *[^{\\.\n]+(0x[0-9]+)\\)? *\\+ *SIZEOF_HEADERS"
        default_base "${string}")
      if ("${default_base}" STREQUAL "")
        message(FATAL_ERROR "unsupported ld version: please file this bug")
      endif()
      string(REGEX REPLACE ".*(0x[0-9]+).*" "\\1" default_base "${default_base}")
      string(REGEX REPLACE "${default_base}" "${PREFERRED_BASE}" string "${string}")
      string(REGEX REPLACE "(\n{)" "\\1\n  . = ${PREFERRED_BASE};" string "${string}")
      file(WRITE ${LD_SCRIPT} "${string}")

      # -dT is preferred, available on ld 2.18+: we could check for it
      set(LD_SCRIPT_OPTION "-T")
      set(PREFERRED_BASE_FLAGS "-Xlinker ${LD_SCRIPT_OPTION} -Xlinker \"${LD_SCRIPT}\"")
    else (UNIX)
      set(PREFERRED_BASE_FLAGS "/base:${PREFERRED_BASE} /dynamicbase:no")
    endif (UNIX)
    set(tgt_link_flags "${tgt_link_flags} ${PREFERRED_BASE_FLAGS}")
  endif (tgt_x64 OR DynamoRIO_SET_PREFERRED_BASE)

  set_compile_flags(${target} "${tgt_cflags}")
  set_target_properties(${target} PROPERTIES LINK_FLAGS "${tgt_link_flags}")

  # TODO: a nice feature would be to check the client for libc imports or
  # other not-recommended properties

endfunction (configure_DynamoRIO_client)


function (configure_DynamoRIO_standalone target)
  configure_DynamoRIO_common(${target} OFF tgt_x64 tgt_cflags tgt_link_flags)
  # get around lack of GLOBAL_SCOPE
  foreach (config "" ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})
    if ("${config}" STREQUAL "")
      set(config_upper "")
    else ("${config}" STREQUAL "")
      string(TOUPPER "_${config}" config_upper)
    endif ("${config}" STREQUAL "")
    foreach (var CMAKE_C_FLAGS${config_upper};CMAKE_CXX_FLAGS${config_upper})
      set(ORIG_${var} "${ORIG_${var}}" PARENT_SCOPE)
      set(CLIENT_${var} "${CLIENT_${var}}" PARENT_SCOPE)
      set(${var} "${${var}}" PARENT_SCOPE)
    endforeach (var)
  endforeach (config)
  set(DynamoRIO_configured_globally ${DynamoRIO_configured_globally} PARENT_SCOPE)

  set_compile_flags(${target} "${tgt_cflags} -DDYNAMORIO_STANDALONE")
  set_target_properties(${target} PROPERTIES LINK_FLAGS "${tgt_link_flags}")

endfunction (configure_DynamoRIO_standalone)


function (configure_DynamoRIO_decoder target)
  get_lang(${target} tgt_lang)
  if (${tgt_lang} MATCHES CXX)
    set(tgt_cxx ON)
  else (${tgt_lang} MATCHES CXX)
    set(tgt_cxx OFF)
  endif (${tgt_lang} MATCHES CXX)

  set(nested_scope ON) # for propagation
  configure_DynamoRIO_global(${tgt_cxx} OFF)
  if (just_configured)
    # get around lack of GLOBAL_SCOPE
    set(just_configured ON PARENT_SCOPE)
    set(DynamoRIO_configured_globally ${DynamoRIO_configured_globally} PARENT_SCOPE)
  endif (just_configured)

  get_target_property(cur_cflags ${target} COMPILE_FLAGS)
  if (NOT cur_cflags)
    set(cur_cflags "") 
  endif (NOT cur_cflags)
  DynamoRIO_extra_cflags(cur_cflags "${cur_cflags}" ${tgt_cxx})
  set_target_properties(${target} PROPERTIES COMPILE_FLAGS "${cur_cflags}")

  # DynamoRIOTarget.cmake added the "drdecode" imported target
  target_link_libraries(${target} drdecode)

endfunction (configure_DynamoRIO_decoder)


function (get_DynamoRIO_defines outvar is_cxx)
  DynamoRIO_extra_cflags(extra_cflags "" ${is_cxx})
  set(${outvar} "${extra_cflags}" PARENT_SCOPE)
endfunction (get_DynamoRIO_defines)

###########################################################################
#

# DynamoRIO Extensions
function (use_DynamoRIO_extension target extname)
  if (NOT DynamoRIO_INTERNAL)
    # Extensions are exported in the same cmake file as DynamoRIO
    # so we do not need to include another file here.
    # FIXME: should we add explicit support for 3rd party Extensions
    # that are not checked in to public svn by searching here for
    # ${cwd}/../ext/cmake/*.cmake or something?
    include_directories(${cwd}/../ext/include)
  else (NOT DynamoRIO_INTERNAL)
    # support building from build dir for our own samples, and from
    # build dir for a client that includes our sources as a sub-project,
    # in which case DynamoRIO_SOURCE_DIR will automatically be set:
    if (EXISTS "${DynamoRIO_SOURCE_DIR}/ext")
      include_directories(${DynamoRIO_SOURCE_DIR}/ext/${extname})
    elseif (EXISTS "${PROJECT_SOURCE_DIR}/ext")
      include_directories(${PROJECT_SOURCE_DIR}/ext/${extname})
    elseif (EXISTS "${PROJECT_SOURCE_DIR}/../../ext")
      # A hack to support samples being a separate project: probably it
      # should NOT be separate inside DR, and the exported CMakeLists.txt
      # should add a project declaration.  An alternative is to
      # copy ext headers to <builddir>/ext/include and not even check
      # DynamoRIO_INTERNAL.
      include_directories(${PROJECT_SOURCE_DIR}/../../ext/${extname})
    endif ()
  endif (NOT DynamoRIO_INTERNAL)

  target_link_libraries(${target} ${extname})

endfunction (use_DynamoRIO_extension)
